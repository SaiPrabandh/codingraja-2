import re
import nltk
import pickle
import pandas as pd
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from flask import Flask, request, jsonify
nltk.download('stopwords')
def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'[^a-z\s]', '', text)
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in text.split() if word not in stop_words]
    return ' '.join(tokens)
with open('social_media_data.csv', 'r') as file:
    lines = file.readlines()
data_list = []
for line in lines:
    text, label = line.strip().split(',', maxsplit=1)
    text = text.strip('"')
    label = label.strip().strip('"')
    data_list.append((text, label))
data = pd.DataFrame(data_list, columns=['text', 'label'])
data['text'] = data['text'].apply(preprocess_text)
data['label'] = data['label'].map({'positive': 2, 'negative': 0, 'neutral': 1})
data.dropna(subset=['label'], inplace=True)
test_size = min(0.2, 1 / len(data))
X_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=test_size, random_state=42)
vectorizer = TfidfVectorizer(max_features=1000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)
model = MultinomialNB()
model.fit(X_train_tfidf, y_train)
y_pred = model.predict(X_test_tfidf)
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1-score:", f1)
with open('social_media_model.pkl', 'wb') as f:
    pickle.dump(model, f)
with open('social_media_vectorizer.pkl', 'wb') as f:
    pickle.dump(vectorizer, f)
app = Flask(__name__)
@app.route('/predict', methods=['POST'])
def predict_sentiment():
    text = request.json['text']
    preprocessed_text = preprocess_text(text)
    text_vectorized = vectorizer.transform([preprocessed_text])
    prediction = model.predict(text_vectorized)[0]
    sentiment_map = {2: 'positive', 0: 'negative', 1: 'neutral'}
    return jsonify({'sentiment': sentiment_map[prediction]})
if __name__ == '__main__':
    app.run(debug=True)
